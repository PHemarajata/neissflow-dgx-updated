/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Singularity-specific configuration for neissflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// Singularity configuration
singularity {
    enabled     = true
    autoMounts  = true
    cacheDir    = "${HOME}/.singularity/cache"
    pullTimeout = '30 min'
    runOptions  = '--cleanenv --containall --no-home --writable-tmpfs'
}

// Environment variables to handle Singularity/Apptainer compatibility
env {
    // Set Apptainer environment variables to suppress warnings
    APPTAINERENV_TMPDIR = "${TMPDIR:-/tmp}"
    APPTAINERENV_NXF_TASK_WORKDIR = "${NXF_TASK_WORKDIR:-}"
    APPTAINERENV_NXF_DEBUG = "${NXF_DEBUG:-}"
}

// Disable other container engines
conda.enabled           = false
docker.enabled          = false
podman.enabled          = false
shifter.enabled         = false
charliecloud.enabled    = false
apptainer.enabled       = false

// Process-specific configurations to handle container pulling issues
process {
    // Enhanced error handling for container-related issues
    errorStrategy = { 
        if (task.exitStatus in [125,126,127]) {
            // Container-related errors - retry
            return 'retry'
        } else if (task.exitStatus in [143,137,104,134,139,140,71,255]) {
            // System/resource errors - retry
            return 'retry' 
        } else {
            return 'finish'
        }
    }
    maxRetries = 3
    
    // Stagger container operations to prevent simultaneous pulls
    beforeScript = '''
        # Create a lock-based system for container operations
        CONTAINER_LOCK_DIR="${HOME}/.nextflow_container_locks"
        mkdir -p "$CONTAINER_LOCK_DIR"
        
        # Random delay to stagger container pulls
        sleep $((RANDOM % 60 + 10))
        
        # Set singularity cache with process-specific subdirectory
        export SINGULARITY_CACHEDIR="${HOME}/.singularity/cache"
        mkdir -p "$SINGULARITY_CACHEDIR"
        
        # Set temporary directory
        export TMPDIR="${TMPDIR:-/tmp}"
        mkdir -p "$TMPDIR"
    '''
    
    // Specific settings for problematic processes
    withName: 'NFCORE_NEISSFLOW:NEISSFLOW:ASSEMBLY:SHOVILL' {
        beforeScript = '''
            # Extended delay for shovill to prevent simultaneous container pulls
            sleep $((RANDOM % 90 + 30))
            export SINGULARITY_CACHEDIR="${HOME}/.singularity/cache/shovill"
            mkdir -p "$SINGULARITY_CACHEDIR"
            
            # Enhanced temporary directory management for disk space
            WORK_TMP_DIR="${PWD}/shovill_work_tmp_${RANDOM}"
            export TMPDIR="${TMPDIR:-$WORK_TMP_DIR}"
            mkdir -p "$TMPDIR"
            
            # Check available disk space
            AVAILABLE_SPACE=$(df -BG "$PWD" | awk 'NR==2 {print $4}' | sed 's/G//')
            echo "Available disk space in work directory: ${AVAILABLE_SPACE}GB"
            
            # Prevent package management operations that cause sources.list errors
            export DEBIAN_FRONTEND=noninteractive
            export APT_LISTCHANGES_FRONTEND=none
            export DEBIAN_PRIORITY=critical
            
            # Set up cleanup on exit
            cleanup_shovill() {
                echo "Cleaning up Shovill temporary files..."
                rm -rf "$WORK_TMP_DIR" 2>/dev/null || true
            }
            trap cleanup_shovill EXIT
        '''
        maxRetries = 5
        errorStrategy = { 
            if (task.exitStatus == 28) {
                return 'retry'  // Retry on "No space left" error
            } else if (task.exitStatus in [100, 1]) {
                return 'ignore'  // Ignore package management errors
            } else {
                return 'finish'
            }
        }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }  // Increase memory for assembly
        time = { check_max( 8.h * task.attempt, 'time' ) }  // Increase time limit
    }
    
    withName: 'NFCORE_NEISSFLOW:NEISSFLOW:PHYLOGENY:SNIPPY' {
        beforeScript = '''
            # Extended delay for snippy to prevent simultaneous container pulls
            sleep $((RANDOM % 90 + 45))
            export SINGULARITY_CACHEDIR="${HOME}/.singularity/cache/snippy"
            mkdir -p "$SINGULARITY_CACHEDIR"
            export TMPDIR="${TMPDIR:-/tmp/snippy_${RANDOM}}"
            mkdir -p "$TMPDIR"
        '''
        maxRetries = 5
        errorStrategy = 'retry'
    }
}

// Executor settings to manage concurrent container operations
executor {
    queueSize = 5  // Reduce concurrent jobs to prevent container conflicts
    pollInterval = '30 sec'
    submitRateLimit = '2 sec'  // Limit job submission rate
}