/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Neissflow Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
trace {    
    enabled = true    
    overwrite = true
    file = 'pipeline_trace.txt'    
    fields = 'task_id,name,status,exit,realtime,%cpu,rss'
}

report {    
    enabled = true    
    overwrite = true
    file = 'report.html'    
}

timeline {    
    enabled = true    
    overwrite = true
    file = 'timeline.html'    
}

process {

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    // Set h_vmem option for qsub submissions
    clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')}" }

    errorStrategy = { 
        if (task.exitStatus in [125,126,127]) {
            // Container-related errors - retry with longer delay
            return 'retry'
        } else if (task.exitStatus in [143,137,104,134,139,140,71,255]) {
            // System/resource errors - retry
            return 'retry' 
        } else if (task.exitStatus == 28) {
            // No space left on device - retry with cleanup
            return 'retry'
        } else {
            return 'finish'
        }
    }
    maxRetries    = 3
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    // swapping some of the values to fit my needs + switching most memory to be powers of 2
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 4      * task.attempt, 'cpus'   ) }
        memory = { check_max( 16.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 2.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_medium {
        cpus   = 12
        memory = { check_max( 32.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 4.h    * task.attempt, 'time'   ) }
    }
    withLabel:process_high {
        cpus   = 16
        memory = { check_max( 60.GB  * task.attempt, 'memory' ) }
        time   = { check_max( 4.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_multi {
        cpus   = { check_max( 16   * task.attempt, 'cpus'   ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h   * task.attempt, 'time'   ) }
    }
    withLabel:process_low_memory {
        memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_medium_memory {
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    }
    withLabel:process_assembly {
        cpus   = { check_max( 16   * task.attempt, 'cpus'   ) }
        memory = { check_max( 64.GB * task.attempt, 'memory' ) }
        time   = { check_max( 12.h  * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus == 28 ? 'retry' : 'finish' }
        maxRetries = 3
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
}